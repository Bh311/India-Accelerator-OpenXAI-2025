{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\avira\\\\Downloads\\\\full_multilingual_chatbot\\\\client\\\\src\\\\components\\\\ChatUi.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport \"../index.css\";\n\n/*\r\n  Multilingual Chat UI:\r\n  - translateEndpoint: placeholder endpoint to translate text (POST)\r\n    expected input: { text: \"...\", source: \"en\", target: \"hi\" }\r\n    expected response: { translatedText: \"...\" }\r\n\r\n  - ollamaEndpoint: your model generation endpoint (POST)\r\n    expected input: { model, prompt, stream }\r\n    expected response: { response: \"...\" }\r\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TRANSLATE_ENDPOINT = \"http://localhost:5000/translate\"; // replace with your translator\nconst OLLAMA_ENDPOINT = \"http://localhost:11434/api/generate\";\nconst languages = [{\n  code: \"en\",\n  label: \"English\"\n}, {\n  code: \"hi\",\n  label: \"Hindi\"\n}, {\n  code: \"es\",\n  label: \"Spanish\"\n}, {\n  code: \"fr\",\n  label: \"French\"\n}, {\n  code: \"de\",\n  label: \"German\"\n}, {\n  code: \"bn\",\n  label: \"Bengali\"\n}\n// add more as needed\n];\nconst chatScrollToBottom = container => {\n  if (!container) return;\n  container.scrollTop = container.scrollHeight;\n};\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]); // {sender: 'user'|'bot', text: '', lang: 'en'}\n  const [input, setInput] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  // UI language preferences\n  const [userLang, setUserLang] = useState(\"en\"); // the language user types in / wants to see\n  const [botLang, setBotLang] = useState(\"en\"); // the language bot should reply in (display language)\n\n  const chatAreaRef = useRef(null);\n  useEffect(() => {\n    chatScrollToBottom(chatAreaRef.current);\n  }, [messages, loading]);\n\n  // helper: translate text using TRANSLATE_ENDPOINT\n  const translateText = async (text, source, target) => {\n    // If source === target, skip\n    if (!text) return \"\";\n    if (source === target) return text;\n    try {\n      var _data$translatedText;\n      const resp = await fetch(TRANSLATE_ENDPOINT, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          text,\n          source,\n          target\n        })\n      });\n      if (!resp.ok) {\n        console.warn(\"Translate API returned error, falling back to original text\");\n        return text;\n      }\n      const data = await resp.json();\n      // assume { translatedText: \"...\" }\n      return (_data$translatedText = data.translatedText) !== null && _data$translatedText !== void 0 ? _data$translatedText : text;\n    } catch (err) {\n      console.error(\"Translate error:\", err);\n      return text;\n    }\n  };\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    const userMessage = {\n      sender: \"user\",\n      text: input,\n      lang: userLang\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setInput(\"\");\n    setLoading(true);\n    try {\n      var _ref, _modelData$response;\n      // 1) translate the user's input into the model language (we pick English 'en' as model language here).\n      const modelLang = \"en\"; // adjust if your model accepts other language inputs\n      const promptForModel = await translateText(input, userLang, modelLang);\n\n      // 2) call the model\n      const modelResp = await fetch(OLLAMA_ENDPOINT, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          model: \"llama3\",\n          // change if needed\n          prompt: promptForModel,\n          stream: false\n        })\n      });\n      let modelData;\n      try {\n        modelData = await modelResp.json();\n      } catch (err) {\n        console.error(\"Error parsing model response JSON:\", err);\n        modelData = {\n          response: \"Sorry, I couldn't parse the model's response.\"\n        };\n      }\n      const modelText = (_ref = (_modelData$response = modelData.response) !== null && _modelData$response !== void 0 ? _modelData$response : modelData.output) !== null && _ref !== void 0 ? _ref : \"\";\n\n      // 3) translate the model's output into the botLang (display language)\n      const translatedBotText = await translateText(modelText, modelLang, botLang);\n      const botMessage = {\n        sender: \"bot\",\n        text: translatedBotText,\n        lang: botLang\n      };\n      setMessages(prev => [...prev, botMessage]);\n    } catch (error) {\n      console.error(\"Error:\", error);\n      setMessages(prev => [...prev, {\n        sender: \"bot\",\n        text: \"⚠️ Error connecting to servers.\",\n        lang: \"en\"\n      }]);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleKeyDown = e => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      sendMessage();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"title\",\n        children: \"Multilingual Chatbot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"lang-selects\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"You:\", /*#__PURE__*/_jsxDEV(\"select\", {\n            value: userLang,\n            onChange: e => setUserLang(e.target.value),\n            className: \"select\",\n            children: languages.map(l => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: l.code,\n              children: l.label\n            }, l.code, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-area\",\n      ref: chatAreaRef,\n      children: [messages.map((msg, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.sender === \"user\" ? \"user\" : \"bot\"}`,\n        title: msg.lang,\n        children: msg.text\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 11\n      }, this)), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"Bot is typing...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyDown: handleKeyDown,\n        placeholder: \"Type a message...\",\n        className: \"chat-input\",\n        rows: 2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        className: \"send-btn\",\n        disabled: loading,\n        children: loading ? \"Sending...\" : \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"footer-note\",\n      children: [\"Tip: Press Enter to send (Shift+Enter for newline). Make sure your translation endpoint is running at \", /*#__PURE__*/_jsxDEV(\"code\", {\n        children: TRANSLATE_ENDPOINT\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 32\n      }, this), \".\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"J1ydnhnyJ3jnAMPi23ZVOh2tDXI=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","TRANSLATE_ENDPOINT","OLLAMA_ENDPOINT","languages","code","label","chatScrollToBottom","container","scrollTop","scrollHeight","Chatbot","_s","messages","setMessages","input","setInput","loading","setLoading","userLang","setUserLang","botLang","setBotLang","chatAreaRef","current","translateText","text","source","target","_data$translatedText","resp","fetch","method","headers","body","JSON","stringify","ok","console","warn","data","json","translatedText","err","error","sendMessage","trim","userMessage","sender","lang","prev","_ref","_modelData$response","modelLang","promptForModel","modelResp","model","prompt","stream","modelData","response","modelText","output","translatedBotText","botMessage","handleKeyDown","e","key","shiftKey","preventDefault","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","map","l","ref","msg","idx","title","onKeyDown","placeholder","rows","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/avira/Downloads/full_multilingual_chatbot/client/src/components/ChatUi.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport \"../index.css\";\r\n\r\n/*\r\n  Multilingual Chat UI:\r\n  - translateEndpoint: placeholder endpoint to translate text (POST)\r\n    expected input: { text: \"...\", source: \"en\", target: \"hi\" }\r\n    expected response: { translatedText: \"...\" }\r\n\r\n  - ollamaEndpoint: your model generation endpoint (POST)\r\n    expected input: { model, prompt, stream }\r\n    expected response: { response: \"...\" }\r\n*/\r\n\r\nconst TRANSLATE_ENDPOINT = \"http://localhost:5000/translate\"; // replace with your translator\r\nconst OLLAMA_ENDPOINT = \"http://localhost:11434/api/generate\";\r\n\r\nconst languages = [\r\n  { code: \"en\", label: \"English\" },\r\n  { code: \"hi\", label: \"Hindi\" },\r\n  { code: \"es\", label: \"Spanish\" },\r\n  { code: \"fr\", label: \"French\" },\r\n  { code: \"de\", label: \"German\" },\r\n  { code: \"bn\", label: \"Bengali\" },\r\n  // add more as needed\r\n];\r\n\r\nconst chatScrollToBottom = (container) => {\r\n  if (!container) return;\r\n  container.scrollTop = container.scrollHeight;\r\n};\r\n\r\nconst Chatbot = () => {\r\n  const [messages, setMessages] = useState([]); // {sender: 'user'|'bot', text: '', lang: 'en'}\r\n  const [input, setInput] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // UI language preferences\r\n  const [userLang, setUserLang] = useState(\"en\"); // the language user types in / wants to see\r\n  const [botLang, setBotLang] = useState(\"en\"); // the language bot should reply in (display language)\r\n\r\n  const chatAreaRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    chatScrollToBottom(chatAreaRef.current);\r\n  }, [messages, loading]);\r\n\r\n  // helper: translate text using TRANSLATE_ENDPOINT\r\n  const translateText = async (text, source, target) => {\r\n    // If source === target, skip\r\n    if (!text) return \"\";\r\n    if (source === target) return text;\r\n\r\n    try {\r\n      const resp = await fetch(TRANSLATE_ENDPOINT, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ text, source, target }),\r\n      });\r\n      if (!resp.ok) {\r\n        console.warn(\"Translate API returned error, falling back to original text\");\r\n        return text;\r\n      }\r\n      const data = await resp.json();\r\n      // assume { translatedText: \"...\" }\r\n      return data.translatedText ?? text;\r\n    } catch (err) {\r\n      console.error(\"Translate error:\", err);\r\n      return text;\r\n    }\r\n  };\r\n\r\n  const sendMessage = async () => {\r\n    if (!input.trim()) return;\r\n\r\n    const userMessage = { sender: \"user\", text: input, lang: userLang };\r\n    setMessages((prev) => [...prev, userMessage]);\r\n    setInput(\"\");\r\n    setLoading(true);\r\n\r\n    try {\r\n      // 1) translate the user's input into the model language (we pick English 'en' as model language here).\r\n      const modelLang = \"en\"; // adjust if your model accepts other language inputs\r\n      const promptForModel = await translateText(input, userLang, modelLang);\r\n\r\n      // 2) call the model\r\n      const modelResp = await fetch(OLLAMA_ENDPOINT, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          model: \"llama3\", // change if needed\r\n          prompt: promptForModel,\r\n          stream: false,\r\n        }),\r\n      });\r\n\r\n      let modelData;\r\n      try {\r\n        modelData = await modelResp.json();\r\n      } catch (err) {\r\n        console.error(\"Error parsing model response JSON:\", err);\r\n        modelData = { response: \"Sorry, I couldn't parse the model's response.\" };\r\n      }\r\n      const modelText = modelData.response ?? modelData.output ?? \"\";\r\n\r\n      // 3) translate the model's output into the botLang (display language)\r\n      const translatedBotText = await translateText(modelText, modelLang, botLang);\r\n\r\n      const botMessage = { sender: \"bot\", text: translatedBotText, lang: botLang };\r\n      setMessages((prev) => [...prev, botMessage]);\r\n    } catch (error) {\r\n      console.error(\"Error:\", error);\r\n      setMessages((prev) => [\r\n        ...prev,\r\n        { sender: \"bot\", text: \"⚠️ Error connecting to servers.\", lang: \"en\" },\r\n      ]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === \"Enter\" && !e.shiftKey) {\r\n      e.preventDefault();\r\n      sendMessage();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-container\">\r\n      <div className=\"chat-header\">\r\n        <div className=\"title\">Multilingual Chatbot</div>\r\n\r\n        <div className=\"lang-selects\">\r\n          <label>\r\n            You:\r\n            <select\r\n              value={userLang}\r\n              onChange={(e) => setUserLang(e.target.value)}\r\n              className=\"select\"\r\n            >\r\n              {languages.map((l) => (\r\n                <option key={l.code} value={l.code}>\r\n                  {l.label}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </label>\r\n\r\n          <label>\r\n           \r\n          </label>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"chat-area\" ref={chatAreaRef}>\r\n        {messages.map((msg, idx) => (\r\n          <div\r\n            key={idx}\r\n            className={`message ${msg.sender === \"user\" ? \"user\" : \"bot\"}`}\r\n            title={msg.lang}\r\n          >\r\n            {msg.text}\r\n          </div>\r\n        ))}\r\n\r\n        {loading && <div className=\"loading\">Bot is typing...</div>}\r\n      </div>\r\n\r\n      <div className=\"input-area\">\r\n        <textarea\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          onKeyDown={handleKeyDown}\r\n          placeholder=\"Type a message...\"\r\n          className=\"chat-input\"\r\n          rows={2}\r\n        ></textarea>\r\n        <button onClick={sendMessage} className=\"send-btn\" disabled={loading}>\r\n          {loading ? \"Sending...\" : \"Send\"}\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"footer-note\">\r\n        Tip: Press Enter to send (Shift+Enter for newline). Make sure your translation\r\n        endpoint is running at <code>{TRANSLATE_ENDPOINT}</code>.\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}